@using System.Globalization;
@using SFA.DAS.AssessorService.ApplyTypes.Roatp.Apply
@using SFA.DAS.AdminService.Common.Extensions

@model SFA.DAS.AdminService.Web.ViewModels.Apply.Financial.RoatpFinancialApplicationViewModel

@{
    ViewBag.Title = "Financial health assessment overview";
    Layout = "_Layout";

    var backAction = FinancialApplicationSelectedGrade.Clarification.Equals(Model.FinancialReviewDetails.SelectedGrade) ? "ClarificationApplications" : "ClosedApplications";
    var wasClarificationDone = !string.IsNullOrEmpty(Model.FinancialReviewDetails?.ClarificationResponse);
}

<div class="govuk-breadcrumbs">
    <ol class="govuk-breadcrumbs__list">
        <li class="govuk-breadcrumbs__list-item">
            <a class="govuk-breadcrumbs__link" asp-action="Index" asp-controller="Dashboard">Dashboard</a>
        </li>
        <li class="govuk-breadcrumbs__list-item">
            <a class="govuk-breadcrumbs__link" asp-action="@backAction" asp-controller="RoatpFinancial">RoATP assessments</a>
        </li>
        <li class="govuk-breadcrumbs__list-item" aria-current="page">Financial health evaluation</li>
    </ol>
</div>

<main class="govuk-main-wrapper " id="main-content" role="main">

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">
            <h1 class="govuk-heading-xl">Financial health assessment overview</h1>
        </div>
    </div>

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <partial name="~/Views/Roatp/Apply/Financial/_OrganisationDetails.cshtml" />
        </div>
    </div>

    @foreach (var section in Model.Sections)
    {
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-two-thirds">
                <h2 class="govuk-heading-l">@Html.Raw(section.LinkTitle)</h2>
            </div>

            @{ var isUploadCss = section.QnAData.Pages.SelectMany(p => p.Questions).Any(q => q.Input.Type == "FileUpload") ? "" : "govuk-!-margin-bottom-9"; }

            @if (section.QnAData.Pages.SelectMany(p => p.Questions).Any(q => q.Input.Type != "FileUpload"))
            {
                <div class="govuk-grid-column-full">
                    <table class="govuk-table @isUploadCss">
                        <thead class="govuk-table__head">
                            <tr class="govuk-table__row">
                                <th class="govuk-table__header" scope="col">Application question</th>
                                <th class="govuk-table__header govuk-table__header--numeric das-no-wrap" scope="col">Applicant's answer</th>
                            </tr>
                        </thead>
                        <tbody class="govuk-table__body">
                            @foreach (var pg in section.QnAData.Pages)
                            {
                                foreach (var question in pg.Questions.Where(q => q.Input.Type != "FileUpload"))
                                {
                                    var answer = pg.PageOfAnswers.SelectMany(poa => poa.Answers).SingleOrDefault(a => a.QuestionId == question.QuestionId)?.Value;

                                    <tr class="govuk-table__row">
                                        <td class="govuk-table__cell">@Html.Raw(question.Label)</td>
                                        <td class="govuk-table__cell govuk-table__cell--numeric">
                                            @switch (question.Input.Type)
                                            {
                                                case "CheckboxList":
                                                case "ComplexCheckboxList":
                                                    <ul class="govuk-list govuk-list--bullet govuk-!-margin-bottom-0">
                                                        @foreach (var selectedAnswer in answer.Split(','))
                                                        {
                                                            <li>@selectedAnswer</li>
                                                        }
                                                    </ul>
                                                    break;
                                                case "Date":
                                                    var dateParts = (string.IsNullOrWhiteSpace(answer) ? new string[] { } : answer.Split(","));
                                                    if (dateParts.Length >= 3)
                                                    {
                                                        DateTime.TryParseExact($"{dateParts[0]}/{dateParts[1]}/{dateParts[2]}", "d/M/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate);
                                                        <text>@parsedDate.ToSfaShortDateString()</text>
                                                    }
                                                    break;
                                                default:
                                                    @if (!string.IsNullOrWhiteSpace(question.Input.InputPrefix))
                                                    {
                                                        <span>@Html.Raw(question.Input.InputPrefix)</span>
                                                    }
                                                    @Html.Raw(answer)
                                                    @if (!string.IsNullOrWhiteSpace(question.Input.InputSuffix))
                                                    {
                                                        <span>@Html.Raw(question.Input.InputSuffix)</span>
                                                    }
                                                    break;
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }

            @if (section.QnAData.Pages.SelectMany(p => p.Questions).Any(q => q.Input.Type == "FileUpload"))
            {
                <div class="govuk-grid-column-two-thirds">
                    <p class="govuk-body govuk-!-margin-bottom-9">
                        <a class="govuk-link" href="@Url.Action("DownloadFiles", "RoatpFinancial", new { applicationId = section.ApplicationId, sectionId = section.Id })">@Model.GetDownloadFilesLinkText(section.SequenceNo, section.SectionNo)</a>
                    </p>
                </div>
            }

        </div>
    }

    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <h2 class="govuk-heading-l">Outcome of financial health assessment</h2>
        </div>
    </div>
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-full">

            <dl class="govuk-summary-list govuk-summary-list--overview govuk-!-margin-bottom-8">
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Outcome
                    </dt>
                    <dd class="govuk-summary-list__value">
                        <span class="@Model.FinancialReviewDetails.OutcomeCssClass">
                            @Model.FinancialReviewDetails.Outcome
                        </span>
                    </dd>
                </div>
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Grade awarded
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @Model.FinancialReviewDetails.SelectedGrade

                    </dd>
                </div>
                @if (wasClarificationDone)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            Clarification response
                        </dt>
                        <dd class="govuk-summary-list__value">
                            @Model.FinancialReviewDetails.ClarificationResponse

                        </dd>
                    </div>

                    {
                        var numberOfFiles = 0;
                        var pluraliseFiles = "files";
                        {
                            if (Model.FinancialReviewDetails.ClarificationFiles != null)
                            {
                                numberOfFiles = Model.FinancialReviewDetails.ClarificationFiles.Count;
                                pluraliseFiles = numberOfFiles == 1 ? "file" : "files";
                            }
                        }
                        <div class="govuk-summary-list__row">
                            <dt class="govuk-summary-list__key">
                                Uploaded @pluraliseFiles
                            </dt>

                            <dd class="govuk-summary-list__value">
                                @if (numberOfFiles == 0)
                                {
                                    <text>N/A</text>
                                }
                                else
                                {
                                    <ul class="govuk-list">
                                        @foreach (var file in Model.FinancialReviewDetails?.ClarificationFiles)
                                        {
                                            <li><a class="govuk-link govuk-link--no-visited-state" asp-action="DownloadClarificationFile" asp-controller="RoatpFinancial" asp-route-ApplicationId="@Model.ApplicationId" asp-route-Filename="@file.Filename">@file.Filename</a></li>
                                        }
                                    </ul>
                                }
                        </div>
                    }
                }
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Financial health assessed on
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @if (Model.FinancialReviewDetails.GradedOn.HasValue)
                        {
                            @Html.Raw(Model.FinancialReviewDetails.GradedOn.Value.ToSfaShortDateString())
                        }
                    </dd>
                </div>
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Financial health assessed by
                    </dt>
                    <dd class="govuk-summary-list__value">
                        @Model.FinancialReviewDetails.GradedBy
                    </dd>
                </div>
                @if (!string.IsNullOrEmpty(Model.FinancialReviewDetails.Comments))
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            Internal comments
                        </dt>

                        <dd class="govuk-summary-list__value">
                            @Model.FinancialReviewDetails.Comments
                        </dd>
                    </div>
                }
                @if (@Model.FinancialReviewDetails.Outcome == FinancialApplicationOutcome.Failed)
                {
                    <div class="govuk-summary-list__row">
                        <dt class="govuk-summary-list__key">
                            External comments
                        </dt>

                        <dd class="govuk-summary-list__value">
                            @Model.FinancialReviewDetails.ExternalComments
                        </dd>
                    </div>
                }
            </dl>

            <p class="govuk-body">
                <a class="govuk-link" asp-action="@backAction" asp-controller="RoatpFinancial">Back to RoATP financial applications</a>
            </p>
        </div>
    </div>
</main>