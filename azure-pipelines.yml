trigger:
  batch: true
  branches:
    include:
      - "master"

variables:
  - group: BUILD Management Resources
  - name: buildConfiguration
    value: 'release'

pool:
  name: 'DAS - Continuous Integration'

resources:
  repositories:
  - repository: das-platform-building-blocks
    type: github
    name: SkillsFundingAgency/das-platform-building-blocks
    ref: refs/tags/2.1.0
    endpoint: SkillsFundingAgency

stages:
- stage: Build
  jobs:
  - job: 'BuildAndTest'
    pool:
      name: DAS - Continuous Integration Agents
      demands: LATEST_DOTNET_VERSION -equals 3.1
    steps:
    - template: azure-pipelines-templates/build/step/gitversion.yml@das-platform-building-blocks
    
    - template: azure-pipelines-templates/build/step/app-build.yml@das-platform-building-blocks
      parameters:
        SonarCloudProjectKey: SkillsFundingAgency_das-admin-service

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: 'src/SFA.DAS.AdminService.Common/SFA.DAS.AdminService.Common.csproj;src/SFA.DAS.AdminService.Common.Testing/SFA.DAS.AdminService.Common.Testing.csproj'
        versioningScheme: byBuildNumber
        packDirectory: $(build.artifactstagingdirectory)/NugetPackages

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory) --no-restore --no-build'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          azure/**
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

    - publish: $(build.artifactstagingdirectory)/NugetPackages
      artifact: NugetPackages

- stage: NugetPublish
  displayName: 'Publish Nuget Package'
  pool:
    name: DAS - Continuous Deployment Agents
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'Manual'))
  jobs:
  - job: 'CleanArtifacts'
    displayName: Clean artifacts directory
    workspace:
      clean: all
  - deployment: 'NugetPush'
    dependsOn: 'CleanArtifacts'
    environment: 'Nuget'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: NugetPackages
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/NugetPackages/*.nupkg;!$(Pipeline.Workspace)/NugetPackages/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'SFA NuGet'
