trigger:
  batch: true
  branches:
    include:
      - "*"

variables:
  - group: "ESFA - SonarCloud"
  - name: sonarCloudProjectKey
    value: "SkillsFundingAgency_das-admin-service"
  - group: 'Prod Management Resources'
  - name: buildConfiguration
    value: 'release'

pool:
  name: 'DAS - Continuous Integration'

resources:
  repositories:
  - repository: das-platform-building-blocks
    type: github
    name: SkillsFundingAgency/das-platform-building-blocks
    ref: refs/heads/master
    endpoint: "GitHub (SFA)"

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: 'BuildAndTest'
    pool:
      name: 'DAS - Continuous Integration'
    steps:
    - task: gittools.gitversion-preview.gitversion-task.GitVersion@5
      displayName: GitVersion
      inputs:
        configFilePath: GitVersion.yml
        updateAssemblyInfo: true

    - task: SonarCloudPrepare@1
      displayName: 'Prepare Sonarcloud analysis configuration'
      inputs:
        SonarCloud: "$(SonarCloudConnectionId)"
        organization: "$(SonarCloudOrganisationKey)"
        scannerMode: 'MSBuild'
        projectName: "$(Build.DefinitionName)"
        projectKey: "$(sonarCloudProjectKey)"
        extraProperties: sonar.exclusions=**/SFA.DAS.AdminService.Web/wwwroot/javascripts/lib/**/*,**/SFA.DAS.AdminService.Web/wwwroot/lib/**/*

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: 'src/**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: 'src/**/*.csproj'
        arguments: '/p:Configuration=$(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        packagesToPack: 'src/SFA.DAS.AdminService.Common/SFA.DAS.AdminService.Common.csproj;src/SFA.DAS.AdminService.Common.Testing/SFA.DAS.AdminService.Common.Testing.csproj'
        versioningScheme: byBuildNumber
        packDirectory: $(build.artifactstagingdirectory)/NugetPackages

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud analysis'

    - task: SonarCloudPublish@1
      displayName: 'Publish results on build summary'
      inputs:
        pollingTimeoutSec: '300'

    - template: azure-pipelines-templates/dependency-check.yml@das-platform-building-blocks

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory) --no-restore --no-build'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        Contents: |
          azure/**
        TargetFolder: '$(build.artifactstagingdirectory)'
        OverWrite: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

    - publish: $(build.artifactstagingdirectory)/NugetPackages
      artifact: NugetPackages

- stage: NugetPublish
  displayName: 'Publish Nuget Package'
  pool:
    name: "DAS - Continuous Deployment"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'Manual'))
  jobs:
  - job: 'CleanArtifacts'
    displayName: Clean artifacts directory
    workspace:
      clean: all
  - deployment: 'NugetPush'
    dependsOn: 'CleanArtifacts'
    environment: 'Nuget'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: NugetPackages
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/NugetPackages/*.nupkg;!$(Pipeline.Workspace)/NugetPackages/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'SFA NuGet'
